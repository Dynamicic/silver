"""
NB: if you're starting a new local project based on this config file:

* copy this file to `settings.py`
* run through looking for TODO and replace those with your local values.

==

Django settings for silverintegration project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import datetime

from authorizenet import constants as authorizenetconstants
from django.utils.log import DEFAULT_LOGGING as LOGGING

sys.path.append('/code/silver/')
sys.path.append('/code/silver_authorizenet/')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'TODO: generate this'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'reversion',
    'reversion_compare',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'dal',
    'dal_select2',
    'silver',
    'silver_authorizenet',
    'history',
    'swagger',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'silverintegration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 'loaders': ['django.template.loaders.filesystem.Loader'],
        },
    },
]

WSGI_APPLICATION = 'silverintegration.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'localhost',
        'PORT': '3306',
        'USER': 'TODO',
        'NAME': 'TODO',
        'PASSWORD': 'TODO',
        'OPTIONS': {
            'read_default_file': '/path/to/my.cnf',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static/")
APPEND_SLASH = True


## Silver settings

SILVER_DEFAULT_DUE_DAYS = 5
SILVER_DOCUMENT_PREFIX = os.path.join(BASE_DIR, 'documents/')
SILVER_DOCUMENT_STORAGE = None
SILVER_PAYMENT_TOKEN_EXPIRATION = datetime.timedelta(minutes=5)
SILVER_AUTOMATICALLY_CREATE_TRANSACTIONS = True

PAYMENT_METHOD_SECRET = b'TODO: generate this'  # Fernet.generate_key()

authorize_api_login       = os.environ['AUTHORIZE_API_LOGIN']
authorize_transaction_key = os.environ['AUTHORIZE_TRANSACTION_KEY']
authorize_key             = os.environ['AUTHORIZE_KEY']

authorizenet_setup_data = {
    'environment': authorizenetconstants.constants.SANDBOX,
    'api_login': authorize_api_login,
    'transaction_key': authorize_transaction_key,
    'key': authorize_key
}

PAYMENT_PROCESSORS = {
    'manual': {
        'class': 'silver.payment_processors.manual.ManualProcessor',
    },
    'authorizenet_triggered': {
        'class': 'silver_authorizenet.payment_processors.AuthorizeNetTriggered',
        'setup_data': {
            'environment': authorizenetconstants.constants.SANDBOX,
            'api_login': authorize_api_login,
            'transaction_key': authorize_transaction_key,
            'key': authorize_key
        },
    },
    'AuthorizeNetTriggered': {
        'class': 'silver_authorizenet.payment_processors.AuthorizeNetTriggered',
        'setup_data': {
            'environment': authorizenetconstants.constants.SANDBOX,
            'api_login': authorize_api_login,
            'transaction_key': authorize_transaction_key,
            'key': authorize_key
        },
    },
}

LOGGING['loggers']['xhtml2pdf'] = {
    'level': 'DEBUG',
    'class': 'logging.FileHandler',
    'filename': os.path.join(BASE_DIR, 'xhtml2pdf.log'),
    'handlers': ['console']
}

try:
    _celery_host = os.environ['REDIS_HOST_STRING']
except:
    _celery_host = 'redis://localhost:6379/0'

CELERY_BROKER_URL = _celery_host

# Transaction Failure Emails
EMAIL_ON_TRANSACTION_FAIL = False
MANAGERS = (
    # ('Manager1', 'manager@example.com'),
)

CELERY_BEAT_SCHEDULE = {
    'generate-pdfs': {
        'task': 'silver.tasks.generate_pdfs',
        'schedule': datetime.timedelta(seconds=120)
    },
    # 'generate-documents': {
    #    'task': 'silver.tasks.generate_documents',
    #    'schedule': datetime.timedelta(seconds=120),
    # },
    # 'execute-transactions': {
    #    'task': 'silver.tasks.execute_transactions',
    #    'schedule': datetime.timedelta(seconds=120),
    # },
    # 'fetch-transactions-status': {
    #    'task': 'silver.tasks.fetch_transaction_status',
    #    'schedule': datetime.timedelta(seconds=120),
    # },
    # 'process-hooks': {
    #     'task': 'silverintegration.hooktask.process_hooks',
    #     'schedule': datetime.timedelta(seconds=40),
    # },
    # 'retry-failed-transactions': {
    #     'task': 'silver.tasks.retry_failed_transactions',
    #     'schedule': datetime.timedelta(seconds=60),
    # },
    # 'check-subscriptions': {
    #     'task': 'silver.tasks.check_subscriptions',
    #     'schedule': datetime.timedelta(seconds=60),
    # },
    # 'check-overpayments': {
    #     'task': 'silver.tasks.check_overpayments',
    #     'schedule': datetime.timedelta(seconds=60),
    # },
}

CELERY_ONCE = {
  'backend': 'celery_once.backends.Redis',
  'settings': {
    'url': _celery_host,
    'default_timeout': 60 * 60
  }
}

LOCK_MANAGER_CONNECTION = {
    'host': 'localhost', 
    'port': 6379, 
    'db': 1
}

PDF_GENERATION_TIME_LIMIT = 60
TRANSACTION_SAVE_TIME_LIMIT = 5

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}
